# -*- coding: utf-8 -*-
"""Heart Disease Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1isTQFVoo0MbIVQC081B3Tg2uRgVig5vF

# Importing Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""# Data Collection and Processing"""

heart_data = pd.read_csv('/content/heart_disease_data.csv')

heart_data.head()

heart_data.shape

heart_data.describe()

# checking the distribution of Target Variables
heart_data['target'].value_counts()

"""# 1 --> Defective Heart
# 0 --> Healthy Heart
"""

X = heart_data.drop(columns='target', axis=1)
Y = heart_data['target']

print(X)

print(Y)

"""# Splitting the data into training and testing data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""# Model Training"""

model = LogisticRegression()

#training the LogisticRegression model with training data
model.fit(X_train, Y_train)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

scaler.fit(X)

"""# Model Evalustion"""

#accuracy score on the basis of training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print('Accuracy on Training data : ', training_data_accuracy)

#accuracy on testing data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print('Accuracy on Testing data : ', test_data_accuracy)

"""# Building a Predicting System"""

input_data = (63,1,3,145,233,1,0,150,0,2.3,0,0,1)
input_data_as_numpy_array = np.asarray(input_data)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0]==0):
  print('The Person does not have a Heart Disease')
else:
  print('The Person has Heart Disease')

"""# Saving the model"""

import pickle

filename = 'heart_disease_model.sav'
pickle.dump(model, open(filename, 'wb'))

loaded_model = pickle.load(open('heart_disease_model.sav', 'rb'))

with open('heart_disease_scaler.sav', 'wb') as scaler_file:
    pickle.dump(scaler, scaler_file)